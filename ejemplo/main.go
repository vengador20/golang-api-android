package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

type AutoGenerated []struct {
	ID       int    `json:"id"`
	Name     string `json:"name"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Address  struct {
		Street  string `json:"street"`
		Suite   string `json:"suite"`
		City    string `json:"city"`
		Zipcode string `json:"zipcode"`
		Geo     struct {
			Lat string `json:"lat"`
			Lng string `json:"lng"`
		} `json:"geo"`
	} `json:"address"`
	Phone   string `json:"phone"`
	Website string `json:"website"`
	Company struct {
		Name        string `json:"name"`
		CatchPhrase string `json:"catchPhrase"`
		Bs          string `json:"bs"`
	} `json:"company"`
}

func api() {

	var users AutoGenerated

	res, err := http.Get("https://jsonplaceholder.typicode.com/users")

	if err != nil {
		panic(err)
	}

	//body,_ := ioutil.ReadAll(res.Body)

	body, _ := ioutil.ReadAll(res.Body)

	json.Unmarshal(body, &users)

	count := len(users)
	fmt.Printf("users: %v\n", count)
}

func main() {
	var (
		count       int
		grupos      []string
		grupoNombre     = "abcdefghijklmnÃ±opqrstuvwxyz"
		grupoNumero     = "123456789"
		numeroIn    int = 3 //users
		users           = []string{"efrain", "jose", "luis"}
	)

	nombres := strings.Split(grupoNombre, "")
	numeros := strings.Split(grupoNumero, "")

	for _, v := range numeros {
		for _, vN := range nombres {
			count++
			if count >= numeroIn {
				count = 0
				break
			}
			grupos = append(grupos, v+vN)
		}
	}

	for i := 0; i < numeroIn; i++ {
		if i >= 2 {
			count++
		}
		ejemplo(users[i], grupos[count])

	}
}

func ejemplo(nombre, grupo string) {
	println(nombre, grupo)
}
